### 1. 정독 & 구상
- 천천히 읽을수록 더 온전히 구상하기에, "절대 서두를 필요 없음"
- 천천히 & 꼼꼼히..!
- 문제 읽다가 모호한 부분 생기면,
    - 코드 한줄 추가/삭제로 해결되는 경우 -> 메모해놓고 구현에서 주석 표시
    - 구상 흐름 전체에 영향 미치는 경우 -> 온전히 이해하고 넘어가야 함
- 구상의 시간복잡도 계산


### 2. 구현
- !! 체크포인트 적극 활용 !!
    - 입력
    - 함수화
    - 배열 회전
    - DFS 조합/순열 구성
    - 등 독립적으로 검증 가능한 모든 부분에 대해!


### 3. 디버깅
- 응급처치 디버깅으로 쉽게 탐지 안 된다면, 디버깅에도 정성 들이기
    - print() 정성 들이는 시간 <<< 대충 출력된 결과를 구분/이해하는 시간
- 에러 발생 + 의심되는 부분에서 탐지 못했으면
    - 코드만 보고있지 말고,
    - 동작 과정 하나하나씩,
    - 가시성 있게 디버깅하자.
- 디버깅 vs. 코드 리셋
    - 특정 부분에서만 구상과 다르게 작동한다면 -> 디버깅 계속
    - (테케 정답과 다르지만) 생각대로 코드가 동작한다면 -> 코드 리셋 후 재작성


### 4. 검증
(1) 주어진 테스트케이스로 검증
(2) 메모 vs. 코드
(3) (머릿속 환기 후) 문제 재정독
(4) 커스텀 테스트케이스 검증
(5) 철저한 코드 검증
(6) 오답노트 활용
(7) 다양한 구상에 따른, 다른 구현

(1) 주어진 테스트케이스로 검증
    - 확인 가능한 테스트케이스의 각 단계를 출력하며, 생각대로 넘어가는지 체크
(2) 메모 vs. 코드
    - 문제의 요구사항 모두 코드에 반영됐는지 체크
    - 모호한 부분/엣지 케이스 반영됐는지 체크
(3) (머릿속 환기 후) 문제 재정독
    - 처음 보는 듯이 1회독(+메모 재작성; 시간 여유 있다면) 후,
    - " 메모에 빠진 사항 / 문제 오해한 부분 / 모호한 문제 지문 " 있는지 체크
    - (시간 여유 있다면) 지문 vs. 코드
(4) 커스텀 테스트케이스 검증
    - 최소/최대 범위 테스트케이스
    - 함수화된 부분 유닛테스트하는, 간단하지만 다양한 테스트케이스
(5) 철저한 코드 검증
    - (시간 여유 있다면) 코드 전체 재작성 & 기존 코드와의 비교
    - 코드 한줄한줄 정독하며, " 임의로 기입된 수치 / 날려쓴 코드 " 없는지 확인
(6) 오답노트 활용
    - 과거에 했던 실수들 되풀이하지 않았는지 체크
    - 코드 한줄한줄 정독하며, 단위 하나하나 살펴보며 실수 포인트 탐지 (특히 인덱싱!)
(7) 다양한 구상에 따른, 다른 구현
    - (시간복잡도/구상 모호한 부분 조금이라도 있다면) 새로운 구상으로 코드 작성해보기
    - 다양한 선택지에 따른 최종 코드 선정은, 최대한 꼼꼼히!


### 오답노트
- 인덱싱/index()함수 활용 시, IndexError 주의..! (17140_이차원 배열과 연산, 23291_어항 정리)
- BFS에서 visited 미사용 시 메모리 초과..! (5427_불!)
- 조함/순열 바꿔서 구현하지는 않았는지..! (15686_치킨 배달)
- 보편적인 규칙을 찾지 않고, 적은 경우에 대해서는 하드코딩 가능하기도 함..! (14499_주사위 굴리기)
- for문을 도는 range()에 값이 정확하게 설정됐는지..! 영역의 상하좌우 모서리에서의 테케 만들어서 확인해보자..! (15685_드래곤 커브)
- 문제 지문에서 당연한 건 없으니, 당연해 보이는 것도 메모해 놓자..! (17142_연구소3)
- 리스트와 같은 기본형 자료구조 대신, 무거운 자료구조로 구현되지 않았는지 체크..! (16235_나무 재테크)
- for문을 통해 조합되는 것들이 유효한 케이스인지, print()를 통해 전부 확인 필요..! (17779_게리맨더링2)
- / // % 연산 시, ZeroDivisionError 주의..! (17822_원판 돌리기)
- 검증없이 당연하게 적히는 수치는 없어야 함..! (17143_낚시왕)
- oob() 체크 필요한 부분 탐지 필요..! 함수 유닛테스트를 위해, 간단하지만 최대한 다양한 커스텀 테케 돌려봐야 함..! (23289_온풍기 안녕!)
- DFS에서 습관적으로 방문체크하면 안됨..! DFS 이전/초기 상태에 대한 숙고 필요..! (23290_마법사 상어와 복제)
- 입력값이 겹치는 경우는 없는지 체크..! (19238_스타트 택시)
- 이진수 활용한 range(2**N)로는 백트래킹 어려움..! 안전하게 DFS 재귀함수 쓰자..! (17370_육각형 우리 속의 개미)
- range()의 종료값 체크..! (2022상반기오전1번_술래잡기)